// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: eab-mgmt.proto

package portal_apis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EABServiceClient is the client API for EABService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EABServiceClient interface {
	CheckEABPermissions(ctx context.Context, in *CheckEABPermissionRequest, opts ...grpc.CallOption) (*CheckEABPermissionResponse, error)
	ResolveAccountId(ctx context.Context, in *ResolveAccountIdRequest, opts ...grpc.CallOption) (*ResolveAccountIdResponse, error)
}

type eABServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEABServiceClient(cc grpc.ClientConnInterface) EABServiceClient {
	return &eABServiceClient{cc}
}

func (c *eABServiceClient) CheckEABPermissions(ctx context.Context, in *CheckEABPermissionRequest, opts ...grpc.CallOption) (*CheckEABPermissionResponse, error) {
	out := new(CheckEABPermissionResponse)
	err := c.cc.Invoke(ctx, "/eabService.EABService/CheckEABPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eABServiceClient) ResolveAccountId(ctx context.Context, in *ResolveAccountIdRequest, opts ...grpc.CallOption) (*ResolveAccountIdResponse, error) {
	out := new(ResolveAccountIdResponse)
	err := c.cc.Invoke(ctx, "/eabService.EABService/ResolveAccountId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EABServiceServer is the server API for EABService service.
// All implementations must embed UnimplementedEABServiceServer
// for forward compatibility
type EABServiceServer interface {
	CheckEABPermissions(context.Context, *CheckEABPermissionRequest) (*CheckEABPermissionResponse, error)
	ResolveAccountId(context.Context, *ResolveAccountIdRequest) (*ResolveAccountIdResponse, error)
	mustEmbedUnimplementedEABServiceServer()
}

// UnimplementedEABServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEABServiceServer struct {
}

func (UnimplementedEABServiceServer) CheckEABPermissions(context.Context, *CheckEABPermissionRequest) (*CheckEABPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEABPermissions not implemented")
}
func (UnimplementedEABServiceServer) ResolveAccountId(context.Context, *ResolveAccountIdRequest) (*ResolveAccountIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveAccountId not implemented")
}
func (UnimplementedEABServiceServer) mustEmbedUnimplementedEABServiceServer() {}

// UnsafeEABServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EABServiceServer will
// result in compilation errors.
type UnsafeEABServiceServer interface {
	mustEmbedUnimplementedEABServiceServer()
}

func RegisterEABServiceServer(s grpc.ServiceRegistrar, srv EABServiceServer) {
	s.RegisterService(&EABService_ServiceDesc, srv)
}

func _EABService_CheckEABPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEABPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EABServiceServer).CheckEABPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eabService.EABService/CheckEABPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EABServiceServer).CheckEABPermissions(ctx, req.(*CheckEABPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EABService_ResolveAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveAccountIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EABServiceServer).ResolveAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eabService.EABService/ResolveAccountId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EABServiceServer).ResolveAccountId(ctx, req.(*ResolveAccountIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EABService_ServiceDesc is the grpc.ServiceDesc for EABService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EABService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eabService.EABService",
	HandlerType: (*EABServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckEABPermissions",
			Handler:    _EABService_CheckEABPermissions_Handler,
		},
		{
			MethodName: "ResolveAccountId",
			Handler:    _EABService_ResolveAccountId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eab-mgmt.proto",
}
