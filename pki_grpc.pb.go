// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pki.proto

package portal_apis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SSLServiceClient is the client API for SSLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSLServiceClient interface {
	ListCertificates(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Details(ctx context.Context, in *DetailsRequest, opts ...grpc.CallOption) (*CertificateDetails, error)
	IssueCertificate(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (*IssueResponse, error)
	RevokeCertificate(ctx context.Context, in *RevokeRequest, opts ...grpc.CallOption) (*RevokeResponse, error)
}

type sSLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSSLServiceClient(cc grpc.ClientConnInterface) SSLServiceClient {
	return &sSLServiceClient{cc}
}

func (c *sSLServiceClient) ListCertificates(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/pkiService.SSLService/ListCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLServiceClient) Details(ctx context.Context, in *DetailsRequest, opts ...grpc.CallOption) (*CertificateDetails, error) {
	out := new(CertificateDetails)
	err := c.cc.Invoke(ctx, "/pkiService.SSLService/Details", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLServiceClient) IssueCertificate(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (*IssueResponse, error) {
	out := new(IssueResponse)
	err := c.cc.Invoke(ctx, "/pkiService.SSLService/IssueCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sSLServiceClient) RevokeCertificate(ctx context.Context, in *RevokeRequest, opts ...grpc.CallOption) (*RevokeResponse, error) {
	out := new(RevokeResponse)
	err := c.cc.Invoke(ctx, "/pkiService.SSLService/RevokeCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSLServiceServer is the server API for SSLService service.
// All implementations must embed UnimplementedSSLServiceServer
// for forward compatibility
type SSLServiceServer interface {
	ListCertificates(context.Context, *ListRequest) (*ListResponse, error)
	Details(context.Context, *DetailsRequest) (*CertificateDetails, error)
	IssueCertificate(context.Context, *IssueRequest) (*IssueResponse, error)
	RevokeCertificate(context.Context, *RevokeRequest) (*RevokeResponse, error)
	mustEmbedUnimplementedSSLServiceServer()
}

// UnimplementedSSLServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSSLServiceServer struct {
}

func (UnimplementedSSLServiceServer) ListCertificates(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCertificates not implemented")
}
func (UnimplementedSSLServiceServer) Details(context.Context, *DetailsRequest) (*CertificateDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Details not implemented")
}
func (UnimplementedSSLServiceServer) IssueCertificate(context.Context, *IssueRequest) (*IssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueCertificate not implemented")
}
func (UnimplementedSSLServiceServer) RevokeCertificate(context.Context, *RevokeRequest) (*RevokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCertificate not implemented")
}
func (UnimplementedSSLServiceServer) mustEmbedUnimplementedSSLServiceServer() {}

// UnsafeSSLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSLServiceServer will
// result in compilation errors.
type UnsafeSSLServiceServer interface {
	mustEmbedUnimplementedSSLServiceServer()
}

func RegisterSSLServiceServer(s grpc.ServiceRegistrar, srv SSLServiceServer) {
	s.RegisterService(&SSLService_ServiceDesc, srv)
}

func _SSLService_ListCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLServiceServer).ListCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkiService.SSLService/ListCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLServiceServer).ListCertificates(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLService_Details_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLServiceServer).Details(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkiService.SSLService/Details",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLServiceServer).Details(ctx, req.(*DetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLService_IssueCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLServiceServer).IssueCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkiService.SSLService/IssueCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLServiceServer).IssueCertificate(ctx, req.(*IssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SSLService_RevokeCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSLServiceServer).RevokeCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkiService.SSLService/RevokeCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSLServiceServer).RevokeCertificate(ctx, req.(*RevokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SSLService_ServiceDesc is the grpc.ServiceDesc for SSLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pkiService.SSLService",
	HandlerType: (*SSLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCertificates",
			Handler:    _SSLService_ListCertificates_Handler,
		},
		{
			MethodName: "Details",
			Handler:    _SSLService_Details_Handler,
		},
		{
			MethodName: "IssueCertificate",
			Handler:    _SSLService_IssueCertificate_Handler,
		},
		{
			MethodName: "RevokeCertificate",
			Handler:    _SSLService_RevokeCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pki.proto",
}
